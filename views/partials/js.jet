<script src="/static/admin/js/pusher.min.js"></script>

<script>
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"],
        disabledTransports: []
    });

    let publicChannel = pusher.subscribe("public-channel");

    publicChannel.bind("app-starting", function (data) {
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = true;
        successAlert(data.message);
    })

    publicChannel.bind("app-stopping", function (data) {
        warningAlert(data.message);
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = false;

        let scheduledTableExists = !!document.getElementById("schedule-table");
        if (scheduledTableExists) {
            let scheduleTable =  document.getElementById("schedule-table");
            scheduleTable.tBodies[0].innerHTML = "";

            let newRow = scheduleTable.tBodies[0].insertRow(-1);
            let newCell = newRow.insertCell(0);
            newCell.setAttribute("colspan", "5");
            newCell.innerHTML = "No scheduled checks!";
        }
    })

    publicChannel.bind("schedule-item-removed-event", function(data) {
        let rowExists = !!document.getElementById("schedule-" + data.host_service_id);
        if (rowExists) {
            let row = document.getElementById("schedule-" + data.host_service_id);
            row.parentNode.removeChild(row);

            // check to see if we need to add a "no scheduled checks" row
            let currentTable = document.getElementById("schedule-table");
            if (currentTable.rows.length === 1) {
                let newRow = currentTable.tBodies[0].insertRow(-1);
                let newCell = newRow.insertCell(0);
                newCell.setAttribute("colspan", "5");
                newCell.innerHTML = "No scheduled checks!";
            }
        }
    })

    publicChannel.bind("schedule-changed-event", function(data) {
        let scheduledTableExists = !!document.getElementById("schedule-table");
        if (scheduledTableExists) {
            let scheduleTable =  document.getElementById("schedule-table");
            
            //check to see if the table contains "No schedule checks!"
            let tableContent = scheduleTable.innerHTML;
            if (tableContent.includes("No scheduled checks!")) {
                let rowCount = scheduleTable.rows.length;
                for (let i = rowCount -1; i > 0; i--) {
                    scheduleTable.deleteRow(i);
                }
            }

            // delete existing row
            let rowExists = !!document.getElementById("schedule-" + data.host_service_id);
            if (rowExists) {
                let row = document.getElementById("schedule-" + data.host_service_id);
                row.parentNode.removeChild(row);
            }

            let newRow = scheduleTable.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "schedule-" + data.host_service_id);

            let newCell = newRow.insertCell(0);
            let newText = document.createTextNode(data.host);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(1);
            newText = document.createTextNode(data.service);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(2);
            newText = document.createTextNode(data.schedule);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(3);
            newText = document.createTextNode(data.last_run);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(4);
            if (data.next_run === undefined) {
                newText = document.createTextNode("Pending");
            } else {
                newText = document.createTextNode(data.next_run);
            }
            newCell.appendChild(newText);

        }
    })

    publicChannel.bind("host-service-status-changed", function(data) {
        // alert user to status change with toast
        attention.toast({
            msg: data.message,
            icon: 'info',
            timer: 30000,
            showCloseButton: true,
        })

        // delete from if it exists
        deleteHostServiceRow(data.host_service_id);

        // add new if table exists
        updateHostServiceTable(data);
    })

function deleteHostServiceRow(hostServiceID) {
        // remove existing table row if it exists
        let exists = !!document.getElementById("host-service-" + hostServiceID);
        if (exists) {
            let row = document.getElementById("host-service-" + hostServiceID);
            row.parentNode.removeChild(row);

            // if this was the last row, add a "no services" row
            // we don't know what table might exist, so check them all

            // first, set up an array with the appropriate status names
            let tables = ["healthy", "pending", "warning", "problem"];

            for (let i = 0; i < tables.length; i++) {
                // check to see if the table exists
                let currentTableExists = !!document.getElementById(tables[i] + "-table");
                if (currentTableExists) {
                    // the table exists, so get a reference to it
                    let currentTable = document.getElementById(tables[i] + "-table");

                    // if the number of rows in the table is one, the only row left is the header,
                    // so we need to insert a  "No services" row in the table body
                    if (currentTable.rows.length === 1) {
                        // add in a "No services" row with colspan 3
                        let newRow = currentTable.tBodies[0].insertRow(-1);
                        let newCell = newRow.insertCell(0);
                        newCell.setAttribute("colspan", "3");
                        newCell.innerHTML = "No services";
                    }
                }
            }
        }
    }

    function updateHostServiceTable(data) {
        let tableExists = !!document.getElementById(data.status + "-table");
        if (tableExists) {
            // get a reference to the correct table
            let tableRef = document.getElementById(data.status + "-table");

            // check the table we are inserting into to see if "no services" message exists; if it does, delete it
            let tableContent = tableRef.innerHTML;
            if (tableContent.includes("No services")) {
                // we have a "no services" row, so delete it
                let rowCount = tableRef.rows.length;
                for (let i = rowCount - 1; i > 0; i--) {
                    tableRef.deleteRow(i);
                }
            }

            // insert new row and give it correct id
            let newRow = tableRef.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "host-service-" + data.host_service_id);

            // insert the first td
            let newCell = newRow.insertCell(0);
            newCell.innerHTML = `<span class="${data.icon}"></span> ${data.service_name}
                <span class="badge bg-secondary pointer" onclick="checkNow(${data.host_service_id}, '${data.status}')">
                    Check Now
                </span>`;

            // insert second td
            newCell = newRow.insertCell(1);
            if (data.status !== "pending") {
                newCell.innerHTML = `${data.last_check}`;
            } else {
                newCell.innerHTML = "Pending...";
            }

            // insert third td (currently empty)
            newRow.insertCell(2);
        }
    }

    publicChannel.bind("host-service-count-changed", function(data) {
        let healthyCountExists = !!document.getElementById("healthy_count");
        if (healthyCountExists) {
            document.getElementById("healthy_count").innerHTML = data.healthy_count;
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
        }
    })

    // things we want to look for
    // - service goes down
    // - services comes up
    // - service status changed
    // - scheduled changed
    // - monitoring turned off
    // - next-run-event changes

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    document.addEventListener("DOMContentLoaded", function() {
    
    let tabMap = new Map();
    let tabs = document.querySelectorAll('[data-toggle="tab"]');
    let i = 0;
     Array.prototype.filter.call(tabs, function (el) {
                el.addEventListener("click", function () {
                    history.pushState("", document.title, window.location.pathname);
                    localStorage.setItem('activeTab', el.getAttribute("data-target"));
                })
                // add it to map
                tabMap.set(el.getAttribute("href"), i);
                i++;
            });

            // show last selected tab, if exists
            if (!window.location.hash) {
                let activeTab = localStorage.getItem('activeTab');
                if (activeTab) {
                    document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
                }
            } else {
                // there is a hash in the url, so show appropriate tab
                if (tabMap.has(window.location.hash)) {
                    document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
                }
            }

            document.getElementById("monitoring-live").addEventListener("change", function() {
                let enabled = document.getElementById("monitoring-live").checked;
                if (!enabled) {
                    attention.confirm({
                        html: "This will stop monitoring of all hosts services. Are you sure?",
                        callback: function(result) {
                            if (result) {
                                // want to turn monitoring off
                                console.log("Would turn monitoring off");
                                updateSystemPref("monitoring_live", "0");
                                toggleMonitoring(0);
                            } else {
                                document.getElementById("monitoring-live").checked = true;
                            }
                        }
                    })
                } else {
                    updateSystemPref("monitoring_live", "1");
                    toggleMonitoring(1);
                }
            })

        });

        function updateSystemPref(prefName, prefValue) {
            let formData = new FormData();
            formData.append("pref_name", prefName);
            formData.append("pref_value", prefValue);
            formData.append("csrf_token", "{{.CSRFToken}}");
            let ajax = new XMLHttpRequest();
            ajax.responseType = "json";
            ajax.open("POST", "/admin/preference/ajax/set-system-pref");
            ajax.send(formData);
            ajax.onreadystatechange = function() {
                if (ajax.readyState === 4) {
                    let resp = ajax.response;
                    if (!resp.ok) {
                        errorAlert("Errors: " + resp.message);
                    }
                }
            }
        }

        function toggleMonitoring(enabled) {
            let formData = new FormData();
            formData.append("enabled", enabled);
            formData.append("csrf_token", "{{.CSRFToken}}");
            let ajax = new XMLHttpRequest();
            ajax.responseType = "json";
            ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
            ajax.send(formData);
            ajax.onreadystatechange = function() {
                if (ajax.readyState === 4) {
                    let resp = ajax.response;
                    if (!resp.ok) {
                        errorAlert("Errors: " + resp.message);
                    }
                }
            }
        }

</script>
